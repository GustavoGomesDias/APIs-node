24/11/2020

{
  "name": "dev1", [Nome da aplicação]
  "version": "1.0.0", [Versão da aplicação]
  "description": "", [Descrição da aplicação]
  "main": "index.js", [Arq. prinicipal]
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1" [scripts executáveis]
  },
  "keywords": [],
  "author": "",
  "license": "ISC"
}

No node, server é a própria aplicação, ou seja, tem a capacidade de se auto gerenciar (receber e responder request)


dependencies --> Dependecias instaladas. Não se compartilha a node_modules, aí quem receber esse app, roda o comando "npm install" e instala esssas dependecias.

Express -> MVC, models, controllers

Http -> Ouvi e responde request

require => jeito de importar do nodeJs

const express = require('express'); => quando tá sem um caminho, ele busca na pasta node_modules

const xpto = require('./express') => ao declarar um caminho, importa da aplicação e não do node_modules.

('nodestr:server');


25/11/2020

Scripts => Posso colocar os comandos que eu quiser executar e depois rodar com npm "nome-script"

Nodemon => Reseta o server sempre que há um alteração.

--save-dev => Só tem instaladi em quanto estiver em desenvolvimento e envia os arquivos insalados para uma dependencies diferente, pois não se precisa dela depois de terminar o desenvolvimento.

Cód. Error
201 => criado/created
400 => bad request
401 => não autenticado
403 => Acesso negado

Body Parser é para converter o retorno do body para json

Put => normalmente é usado para atualizar algo

Controller => Dada um requisão, quem faz a manipulação da mesma é um controller.

28/11/2020
MongoDB - Não é um Db que trabalha com sql

Recomendação de livro:
NoSql Distiled - Martin Fowler
Json vira um documento de uma collection
Não há validação como no relacional

Mongose => prover a criação de collections

MVC => Models

Schema => cria um id automaticamente

trim (que está em product.js, onde criamos o schema para o DB) => remove os espaços antes e depois do título.

slug => Item do produto que vai compor a url
|_Tem índice (index) e unique(único)

var product = new Product(req.body); // Simples e perigosa
  Melhor jeito é passar um de cada vez
    Ex.: product.title = req.body.title;

.find({ active: true }, 'title price slug') => só vou pegar produtos active = true e só vai exibir title price slug.

30/11/2020

exports.getById... => vai puxar o produto pelo id.
router.get('/admin/:id', controller.getById); => admin foi colocado por conta de que daria conflito com o outro com o slug

findByIdAndUpdate => Usado para alterar um produto (diferente do outro já usado) e é mais prático.

$set => taca o que veio da requisição para o que vai ser alterado do produto.

01/12/2020

A validação está toda dentro do model e por isso, caso precisassemos fazer chamada em outro serviço, essa validações não iriam passar. Criar um valadição fora do moongose (validators).

02/12/2020

Repositoty Pattern => Isola todo acesso a dados do app (controllers) que é simples e fácil de implementar. Cria-se algo que vai ao DB e retorna o que a gente precisa, ele é o responsável por cuidar do trafego de dados.